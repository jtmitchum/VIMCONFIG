% James Mitchum Lab 6 MatLab code
% based in some part from the script handed out by Knopp
% entitled cd4007realdata.m

% NPN Transistors
VGS = 	[0, 0.1, 0.2,0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 2, 3, 4];
IG = 	[0, 0, 0,   0,    0,   0,   0,   0,   0,   0, 0,0.00002 , 0.00003, 0.00003; 
	0,0,0,0,0,0,0,0,0,0.0001,0.00002,0.247, 1.173, 2.65;
	0,0,0,0,0,0,0,0,0,0,0.0002,0.244,1.2,2.76];
for N = 1:3

p2(N,:) = polyfit(VGS, sqrt(IG(N,:)), 1)

Kn2(N) = p2(N,1)^2;

Vt(N) = p2(N,2)/p2(N,1);
end

IGP = [	0,0,0,0,0.0002, 0.0082, 0.052, 124.7, 1.216, 1.909, 10.22, 16, 16, 16;	    0,0,0,0,0.0002, 0.0086, 0.0532, 1.5, 3.9, 7.41, 10.11, 14.8, 14.8, 16;
	0,0,0,0,0,0.01, 0.19,1.28, 3.63, 7.54, 10.99, 16.5, 17, 18];
for P=1:3
	p3(P,:) = polyfit(VGS, sqrt(IGP(P,:)), 1)
	KP(P) = p3(P,1)^2;
	VTP(P) = p3(P,2)/p3(P, 1);
end

K_NPN=mean(Kn2)

V_TN=mean(Vt)

K_PNP=mean(KP)

V_TP=mean(VTP)

lambda = inline('(ID - IDG)/(IDG*9 - VGS * ID)', 'ID', 'IDG', 'VGS');
% Calculate lambda based on values of Ig and Id that both give a current. 
IDN = [ 0:0:10,0, 0.00002, 0.00003, 0.00003];
%For NPN, only the last four values reliably gave a current
for R = 1:3

	for N = 11:14
		lams(R,N) = lambda(IDN(R), IG(R, N), VGS(N));	
	end
end
N_lams = mean(lams)
IDP = [ 0, 0, 0, 0, 0, 0.0001, -0.0012, -0.0097, -0.0401, -0.134, -0.273, -0.297, -0.297, -0.297; 0,0,0,0,0,0,-0.0001, -0.0003, -0.0015, -0.0037, -0.004, -0.005, -0.005, -0.005; 0,0,0,0,0,0,0,0,0,-0.0002, -0.0005, -0.0008, -0.0008, -0.0008 ]
for R=1:3
	for N=1:14
		lams(R,N) = lambda(IDP(R, N), IGP(R, N), VGS(N));
	end
end
P_lams = mean(lams)

